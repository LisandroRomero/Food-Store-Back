TESTS COMPLETOS PARA POSTMAN

SECUENCIA DE TESTING - Ejecutar en este orden:

1. CREAR USUARIOS
POST http://localhost:8080/usuarios
{
    "nombre": "María",
    "apellido": "Gonzalez",
    "mail": "maria@email.com",
    "password": "123456",
    "rol": "USUARIO"
}

POST http://localhost:8080/usuarios
{
    "nombre": "Admin",
    "apellido": "Sistema",
    "mail": "admin@email.com", 
    "password": "admin123",
    "rol": "ADMIN"
}

Verificar: GET http://localhost:8080/usuarios

---------------------------------------------------------------------------

2. CREAR PRODUCTOS
POST http://localhost:8080/productos
{
    "nombre": "Pizza Margarita",
    "precio": 12.50
}

POST http://localhost:8080/productos
{
    "nombre": "Hamburguesa Clásica",
    "precio": 8.75
}

POST http://localhost:8080/productos
{
    "nombre": "Ensalada César",
    "precio": 6.25
}

Verificar: GET http://localhost:8080/productos



---------------------------------------------------------------------------

3. CREAR PEDIDOS (Relación Usuario → Pedido)
POST http://localhost:8080/pedidos
{
    "fecha": "2024-01-15",
    "estado": "PENDIENTE",
    "total": 25.00,
    "usuarioId": 1
}

POST http://localhost:8080/pedidos
{
    "fecha": "2024-01-15", 
    "estado": "CONFIRMADO",
    "total": 15.00,
    "usuarioId": 1
}

Verificar relaciones:
- GET http://localhost:8080/pedidos/usuario/1 (debe mostrar 2 pedidos del usuario 1)
- GET http://localhost:8080/pedidos/1 (verificar que trae datos del usuario)

---------------------------------------------------------------------------

4. CREAR DETALLES DE PEDIDO (Relaciones Pedido → DetallePedido ← Producto)
POST http://localhost:8080/detalles-pedido
{
    "cantidad": 2,
    "subtotal": 25.00,
    "pedidoId": 1,
    "productoId": 1
}

POST http://localhost:8080/detalles-pedido
{
    "cantidad": 1,
    "subtotal": 8.75,
    "pedidoId": 1,
    "productoId": 2
}

POST http://localhost:8080/detalles-pedido
{
    "cantidad": 1,
    "subtotal": 6.25,
    "pedidoId": 2,
    "productoId": 3
}

Verificar relaciones:
- GET http://localhost:8080/detalles-pedido/pedido/1 (debe mostrar 2 detalles del pedido 1)
- GET http://localhost:8080/detalles-pedido/1 (verificar que trae datos del pedido y producto)

---------------------------------------------------------------------------

5. TEST DE ESTADOS (Enum Estado)
PUT http://localhost:8080/pedidos/1
{
    "estado": "CONFIRMADO",
    "total": 25.00
}

PUT http://localhost:8080/pedidos/2
{
    "estado": "TERMINADO", 
    "total": 15.00
}

Verificar estados:
- GET http://localhost:8080/pedidos/estado/CONFIRMADO
- GET http://localhost:8080/pedidos/estado/TERMINADO

---------------------------------------------------------------------------

6. TEST DE ROLES (Enum Rol)
GET http://localhost:8080/usuarios/1 (debe ser USUARIO)
GET http://localhost:8080/usuarios/2 (debe ser ADMIN)

---------------------------------------------------------------------------

7. TEST DE BÚSQUEDAS ESPECÍFICAS
- GET http://localhost:8080/usuarios/email/maria@email.com
- GET http://localhost:8080/productos/buscar/pizza

---------------------------------------------------------------------------

8. TEST DE SOFT DELETE
DELETE http://localhost:8080/productos/3

Verificar:
- GET http://localhost:8080/productos (no debe mostrar el producto 3)
- GET http://localhost:8080/detalles-pedido/3 (debe seguir funcionando aunque el producto esté "eliminado")

---------------------------------------------------------------------------

9. TEST DE ACTUALIZACIONES
PUT http://localhost:8080/usuarios/1
{
    "nombre": "María Elena",
    "apellido": "Gonzalez",
    "password": "nueva123"
}

PUT http://localhost:8080/detalles-pedido/1
{
    "cantidad": 3,
    "subtotal": 37.50
}

---------------------------------------------------------------------------

VERIFICACIONES FINALES DEL UML:

1. Usuario → Pedido ✅ (Un usuario tiene múltiples pedidos)
2. Pedido → DetallePedido ✅ (Un pedido tiene múltiples detalles)  
3. Producto → DetallePedido ✅ (Un producto está en múltiples detalles)
4. Enums funcionando ✅ (Rol: USUARIO/ADMIN, Estado: PENDIENTE/CONFIRMADO/CANCELADO/TERMINADO)
5. Relaciones unidireccionales ✅ (Como se especifica en el PDF)
6. SHA-256 para contraseñas ✅ (Se hashean automáticamente)
7. Soft Delete ✅ (eliminado = true)

ESTADO ESPERADO FINAL:
- 2 usuarios (1 USUARIO, 1 ADMIN)
- 3 productos (1 "eliminado")
- 2 pedidos (diferentes estados)
- 3 detalles de pedido (relacionando todo)